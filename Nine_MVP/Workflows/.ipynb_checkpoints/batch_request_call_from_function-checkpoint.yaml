# This is the main workflow to generate image contents in batch
#

main:
  steps:
    # Step 1: initialize varibales
    - init:
        assign:
            - PROJECT: ${sys.get_env("GOOGLE_CLOUD_PROJECT_ID")}
            - LOCATION: ${sys.get_env("GOOGLE_CLOUD_LOCATION")}
            - SOURCE_BUCKET:  "raw_nine_files"
            - DESTINATION_BUCKET: 'artifacts-nine-quality-test-embeddings'
            
            - CONTENT_METHOD: "batchPredictionJobs" 
            - CONTENT_LLM_API_ENDPOINT: ${"https://" + LOCATION + "-aiplatform.googleapis.com" + "/v1/projects/" + PROJECT + "/locations/" + LOCATION + "/"+CONTENT_METHOD}
            - MODEL: "publishers/google/models/gemini-1.5-flash-002"
            - MEDIA_TYPES: "image/jpeg,image/png"

            - FUNC_CREATE_GCS_BATCH_REQUEST: ${"https://"+LOCATION+"-"+PROJECT+".cloudfunctions.net/func_generate_batchrequest_file"}
            
            - REQUEST_FILE_PREFIX: "image_request"
            - NOW: ${string(sys.now())}
            - REQUEST_FOLDER: ${"image_batch_request_fldr"+NOW}
            - BATCH_PREDICTION_FOLDER: ${"image_batch_prediction_fldr_out"+NOW} 
            
            # - IMAGE_PROMPT_TEXT: "You are an assistant tasked with describing images for retrieval. \
            #                     These descriptions will be embedded and used to retrieve the raw image. \
            #                     Give a concise description of the image that is well optimized for retrieval.\
            #                     If there is a text in the image mention that. If there is a famous person like politician, celebrity or athlete, indicate their name and describe what they are famous for.\
            #                     If you are not sure about any info, please do not make it up. Do not add any extra text to the output."

            - IMAGE_PROMPT_TEXT: "You are an assistant tasked with describing images for retrieval. \
                                Describe this image well optimized for retrieval. If there is a text in the image mention that. If there is a famous person like politician, celebrity or athlete, indicate their name and describe what they are famous for.\
                                If you are not sure about any info, please do not make it up. Do not add any extra text to the output."

            - TEMPERATURE: 0.5
            - MAX_OUT_TOKENS: 2048
            - TOP_P: 0.8
            - TOP_K: 40
            - REQUEST_CONTENT: 'image'

    # Step 2: List objects in the GCS bucket
    - list_files:
        call: googleapis.storage.v1.objects.list
        args:
          bucket: ${SOURCE_BUCKET}
        result: list_result
 
   
    
    - genearte_batch_request_file:
        call: http.post
        args:
            url: ${FUNC_CREATE_GCS_BATCH_REQUEST}
            query:
                name: "GENERATE BATCH REQUEST FILE FOR IMAGE"            
                destination_bucket: ${DESTINATION_BUCKET}
                source_bucket: ${SOURCE_BUCKET}
                request_file_prefix: ${REQUEST_FILE_PREFIX} 
                request_file_folder:  ${REQUEST_FOLDER}              
                prompt_text:  ${IMAGE_PROMPT_TEXT}
                max_output_tokens: ${MAX_OUT_TOKENS}
                temperature: ${TEMPERATURE}
                top_p: ${TOP_P}
                top_k: ${TOP_K}
                request_content: ${REQUEST_CONTENT}
                media_types: ${MEDIA_TYPES}
        result:  request_file_res



    - log_batch_request:
        call: sys.log
        args:
          text: ${"Batch Request File Is Created - " + "gs://"+DESTINATION_BUCKET+"/"+request_file_res.body.request_file_name}

    # Step 6: Set request/response file name/location
    - set_request_response_locations:
        assign:
            - source_file: ${"gs://"+DESTINATION_BUCKET+"/"+request_file_res.body.request_file_name}
            - source_file: "gs://raw_nine_files/reqtest.json"
            - destination_folder: ${"gs://"+DESTINATION_BUCKET+"/"+BATCH_PREDICTION_FOLDER}

 


    # Step 7: Extract image contents by sending a batch prediction job                             
    - create_batch_request_job:        
                steps:
                    - ask_llm:
                        call: http.post
                        args:
                            url: ${CONTENT_LLM_API_ENDPOINT}
                            auth:
                                type: OAuth2
                            body:
                               
                                displayName: "BP_JOB_IMAGE_CONTENT_GENERATOR"
                                model: ${MODEL}
 
                                inputConfig: {
                                        instancesFormat:"jsonl",
                                        gcsSource:{  
                                                uris : "${source_file}"
                                                 }
                                            }
                                 
                                outputConfig: {
                                        predictionsFormat:"jsonl",
                                        gcsDestination:{
                                             outputUriPrefix: "${destination_folder}"
                                              }
                                          }
                                          
                        result: llm_response 

    - log_batch_prediction_job:
        call: sys.log
        args:
          text: ${"Batch Prediction Job Is Created - " +llm_response.body.name}

    # Step 8: Get the job status 
    - get_job_status:    
        call: googleapis.aiplatform.v1.projects.locations.batchPredictionJobs.get
        args:
            name:  ${llm_response.body.name}
            region: ${LOCATION}     
       
        result: listResult
    
    # Step 9: check the job status if succeeded or failed return
    - checkIfDone: 
        switch:
            - condition: ${listResult.state=="JOB_STATE_SUCCEEDED"}
              steps:
                    - set_success_out_put:
                        assign:
                            - out_result:
                                   output_dir: "${listResult.outputInfo.gcsOutputDirectory}"
                                   state: "JOB_STATE_SUCCEEDED" 
              next: log_job_execution

            - condition: ${listResult.state=="JOB_STATE_FAILED"}
              steps:
                    - set_fail_out_put:
                        assign:
                            - out_result:
                                   output_dir: ""
                                   state: "JOB_STATE_FAILED" 
              next: log_job_execution

    # Step 10: if job status is not  succeeded or failed, sleep for 120 seconds and check it again
    - wait:
            call: sys.sleep
            args:
                seconds: 120
            next: get_job_status

    - log_job_execution:
        call: sys.log
        args:
          text: ${"Batch Prediction Is Finished - " + "Output Bucket Directory "+ out_result.output_dir+ " ," + "Job Execution Status "+ out_result.state}
    
    # Step 11: return the result
    - return_result:
        return: ${out_result}

 


 
